import axiosInstance from "./axiosInstance";

// ✅ 1. 고정된 프로젝트 설명 및 요청 방식
const PROJECT_DESCRIPTION = `
당신은 면접 전문가로서 지원자의 자기소개서를 기반으로, 실제 면접에서 활용 가능한 '심화 면접 질문'을 생성합니다.
자소서1~N을 읽어주세요.

당신의 창의력을 최대한 발휘하되 아래의 원칙만 지켜서 자유롭게 생성하시오.   
질문 내용은 추상적인 아이디어를 묻기 보단 구체적인 명칭을 이용하고, 심도있게.

질문 생성 원칙:
1. 각 질문은 반드시 "자기소개서"내용을 기준으로 만들어야합니다.
2. 자기소개서 안에 당신이 만든 질문에 대한 답이 이미 존재해서는 안 됩니다. 명심하세요.
ex) "경영지원과 사업기획 및 운영이 중요하다고 생각합니다. 왜냐하면 온라인 마권 발매 제도가 도입되면 해당 제도에 대한 행정업무의 변화뿐만 아니라 " 라는 내용이 자소서에 이미 있는데, 질문을 "온라인 마권 발매 제도가 도입될 때 경영지원과 사업기획 및 운영이 왜 중요하다고 생각하시나요?" 라고 만들지 마세요
3. 각 질문을 만들 땐, 해당 질문의 '근거'가되는 부분을 자소서 내에서 찾아야합니다.
4. 각 질문의 근거를 찾을 땐, 일반적으로 '온전한 문장'을 찾아야합니다. 즉, 주어로 시작하여 끝맺음 문장으로 끝나는 부분을 찾아야합니다.
5. 각 질문의 근거를 찾을 때 온전한 문장이 100자를 넘어가게 될 경우, 그 내에서 최대한 짧게 온전한문장을 이루는 부분을 찾아야합니다.
6. 각 질문을 만들 땐 단순 반복 질문은 하면 안 됩니다.
10. 질문자가 답변했을 때 꼬리질문이 가능하도록 질문을 유도해주세요.
11. 질문은 구체적으로 명시해줘야합니다.
12. 질문예시 : ex) ~라고 지원자가 자소서에 적어주셨는데,  + 본 질문   <- 이런 느낌의 질문 섞어서
13. 지원자를 지칭할 땐, '당신'이 아닌 '지원자'라고 지칭해야합니다.
각각의 질문은 자기소개서 내용과 일치해야 하며, 출처를 반환할 때에는 원본 자소서에서 해당 문장을 찾아 인덱스로 반환하세요. 
14. 아래는 자소서 내용별 추가 참고사항입니다.
(1) 지원자가 ~라고 '생각'한다는 내용이 있을 때 : 왜 ~에 대해 ~라고 생각하는지 이유를 물어보는 것도 좋습니다.
(2) 지원자가 실제 경험한 내용에 대해 있을 때 : 해당 경험에서 구체적으로 뭘 했고, 무엇을 배웠는지, 해당 경험에서 겪은 과제나 예상치 못했던 문제 등이 있었는지
(3) 지원자가 '성취 관련'한 내용을 적었을 때 : 이를 위해 지원자가 했던 노력, 힘들었던 점, 향후 이러한 경험을 어떻게 활용할 수 있을 것인지에 대한 질문
(4) 갈등 관련 내용이 있을 때 : 구체적으로 어떤 역할을 했는지, 향후 비슷한 상황이 있을 때 어떻게 대처할 지, 그로부터 얻은 교훈이 뭔지 등에 대한 질문
(5) 지원자가 향후 포부에 대한 내용을 담았을 때, 향후 계획관련 질문 시 : 실제 지원자가 미래에 입사를 해야만 경험할 수 있는 것들에 대해선 계획을 물어보지 말아주세요. 너무 보편적인 것에 대해 구체적으로 물어보지 말아주세요
 ex) '성실하게 임하겠습니다'라는 자소서 내용에 대해 '어떻게 성실하게 임할 계획이죠?'라고 묻기 금지
 단, 명확한 업무에 대한 포부가 있을 경우엔 물어봐도 됩니다. ex) '지원자는 사업기획 담당으로서 어떤 식으로 ~한 계획을 할거냐'
 (6) 공통 : 너무너무 당연한 얘기 가지고 왜 그랬는지 물어보지 않기
ex) 음식을 맛있게 했기 때문에 맛있게 먹었다 라는 내용에 대해 '왜 맛있게 먹었나요?'물어보지 않기

`;

// ✅ 3. 고정된 응답 형식 (수정됨)
const RESPONSE_FORMAT = `
응답은 반드시 다음과 같은 JSON 형식으로 반환되어야 합니다:
{
  "key_number": "지원자 식별번호(key_number)",
  "cover_letter_num": 질문을 만들 자소서 개수,
  "question_num": 각 자소서별 만들 질문 개수 , // 배열 아님. 정수값 하나임
  "question1-1": "1번 자소서에 대한 질문 1",
  "question1-2": "1번 자소서에 대한 질문 2",
  "clue1-1": { "start_index": 55, "end_index": 120 }, // 1번 질문의 근거 출처 인덱스
  "clue1-1_origin_text":"너가 찾은 1번 질문의 근거 원본 텍스트 자체"
  "clue1-2": { "start_index": 140, "end_index": 180 }, // 2번 질문의 근거 출처 인덱스
  "clue1-2_origin_text":"너가 찾은 2번 질문의 근거 원본 텍스트 자체"
  "questionN-M": "N번 자소서에 대한 질문 M",
  "clueN-M": { "start_index": XXX, "end_index": YYY } // N번 자소서 M번 질문의 근거 출처 인덱스
  "clueN-M_origin_text":"너가 찾은 N번자소서 M번 질문의 근거 원본 텍스트 자체"
}
JSON 이외의 형식으로 응답하지 마세요.
`;

// ✅ GPT API 요청 함수
export const sendPrompt = async (userData, userRequest, secretPassword) => {
    if (!userData || !userData.key_number) {
        throw new Error("❌ 유효한 지원자 데이터가 없습니다. key_number가 필요합니다.");
    }

    // ✅ 2. 사용자 실제 데이터 (개별 지원자)
    const userDataString = JSON.stringify(userData, null, 2);

    // ✅ 4. 사용자가 직접 입력한 추가 요청 사항
    const userRequestString = userRequest.trim() ? `\n추가 요청 사항: ${userRequest}` : "";

    // ✅ 최종 프롬프트 구성
    const finalPrompt = `
${PROJECT_DESCRIPTION}

[사용자 데이터]
${userDataString}

[응답 형식]
${RESPONSE_FORMAT}
${userRequestString}
`;

    console.log("🔹 최종 GPT 요청 프롬프트:", finalPrompt);

    try {
        // ✅ API 요청 (환경변수에서 불러온 엔드포인트 사용)
        const response = await axiosInstance.post("/gpt/generate-text", {
            prompt: finalPrompt,
            max_tokens: 3000,  // ✅ 토큰 수 증가
            secretPassword
        });

        console.log("✅ GPT 응답:", response.data);
        return response.data;
    } catch (error) {
        if (error.response) {
            if (error.response.status === 403) {
                alert("❌ 비밀번호가 틀렸습니다. 다시 확인하세요.");
                return { error: "❌ 비밀번호 오류" };
            } else if (error.response.status === 500) {
                alert("❌ 서버에서 오류가 발생했습니다. 관리자에게 문의하세요.");
                return { error: "❌ 서버 오류 발생" };
            }
        } else {
            alert("❌ 요청 실패. 네트워크 상태를 확인하세요.");
        }

        console.error("❌ API 요청 중 오류 발생:", error);
        throw error;
    }
};
